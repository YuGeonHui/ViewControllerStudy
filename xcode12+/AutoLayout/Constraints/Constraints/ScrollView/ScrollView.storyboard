<?xml version="1.0" encoding="UTF-8"?>
<document type="com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB" version="3.0" toolsVersion="20037" targetRuntime="iOS.CocoaTouch" propertyAccessControl="none" useAutolayout="YES" useTraitCollections="YES" useSafeAreas="YES" colorMatched="YES" initialViewController="Y6W-OH-hqX">
    <device id="retina6_1" orientation="portrait" appearance="light"/>
    <dependencies>
        <deployment identifier="iOS"/>
        <plugIn identifier="com.apple.InterfaceBuilder.IBCocoaTouchPlugin" version="20020"/>
        <capability name="Safe area layout guides" minToolsVersion="9.0"/>
        <capability name="System colors in document resources" minToolsVersion="11.0"/>
        <capability name="documents saved in the Xcode 8 format" minToolsVersion="8.0"/>
    </dependencies>
    <scenes>
        <!--View Controller-->
        <scene sceneID="Rfo-I3-2kV">
            <objects>
                <viewController id="uvi-bL-aUa" sceneMemberID="viewController">
                    <view key="view" contentMode="scaleToFill" id="laT-hx-PtW">
                        <rect key="frame" x="0.0" y="0.0" width="414" height="896"/>
                        <autoresizingMask key="autoresizingMask" widthSizable="YES" heightSizable="YES"/>
                        <subviews>
                            <textView clipsSubviews="YES" multipleTouchEnabled="YES" contentMode="scaleToFill" textAlignment="natural" translatesAutoresizingMaskIntoConstraints="NO" id="Mex-Mo-Eeg">
                                <rect key="frame" x="0.0" y="44" width="414" height="818"/>
                                <color key="backgroundColor" systemColor="systemBackgroundColor"/>
                                <mutableString key="text">UIScrollView is the superclass of several UIKit classes, including UITableView and UITextView.

A scroll view is a view with an origin that’s adjustable over the content view. It clips the content to its frame, which generally (but not necessarily) coincides with that of the application’s main window. A scroll view tracks the movements of fingers, and adjusts the origin accordingly. The view that shows its content through the scroll view draws that portion of itself according to the new origin, which is pinned to an offset in the content view. The scroll view itself does no drawing except for displaying vertical and horizontal scroll indicators. The scroll view must know the size of the content view so it knows when to stop scrolling. By default, it bounces back when scrolling exceeds the bounds of the content.

The object that manages the drawing of content that displays in a scroll view needs to tile the content’s subviews so that no view exceeds the size of the screen. As users scroll in the scroll view, this object adds and removes subviews as necessary.

Because a scroll view has no scroll bars, it must know whether a touch signals an intent to scroll versus an intent to track a subview in the content. To make this determination, it temporarily intercepts a touch-down event by starting a timer and, before the timer fires, seeing if the touching finger makes any movement. If the timer fires without a significant change in position, the scroll view sends tracking events to the touched subview of the content view. If the user then drags their finger far enough before the timer elapses, the scroll view cancels any tracking in the subview and performs the scrolling itself. Subclasses can override the touchesShouldBegin(_:with:in:), isPagingEnabled, and touchesShouldCancel(in:) methods (which the scroll view calls) to affect how the scroll view handles scrolling gestures.

A scroll view also handles zooming and panning of content. As the user makes a pinch-in or pinch-out gesture, the scroll view adjusts the offset and the scale of the content. When the gesture ends, the object managing the content view updates subviews of the content as necessary. (Note that the gesture can end and a finger might still be down.) While the gesture is in progress, the scroll view doesn’t send any tracking calls to the subview.

The UIScrollView class can have a delegate that must adopt the UIScrollViewDelegate protocol. For zooming and panning to work, the delegate must implement both viewForZooming(in:) and scrollViewDidEndZooming(_:with:atScale:). In addition, the maximumZoomScale and minimumZoomScale zoom scales must be different.</mutableString>
                                <color key="textColor" systemColor="labelColor"/>
                                <fontDescription key="fontDescription" type="system" pointSize="14"/>
                                <textInputTraits key="textInputTraits" autocapitalizationType="sentences"/>
                            </textView>
                        </subviews>
                        <viewLayoutGuide key="safeArea" id="LFK-qX-kTA"/>
                        <color key="backgroundColor" systemColor="systemBackgroundColor"/>
                        <constraints>
                            <constraint firstItem="LFK-qX-kTA" firstAttribute="bottom" secondItem="Mex-Mo-Eeg" secondAttribute="bottom" id="cVT-cL-TaN"/>
                            <constraint firstItem="Mex-Mo-Eeg" firstAttribute="leading" secondItem="LFK-qX-kTA" secondAttribute="leading" id="cfq-Eh-T94"/>
                            <constraint firstItem="Mex-Mo-Eeg" firstAttribute="top" secondItem="LFK-qX-kTA" secondAttribute="top" id="iL0-AF-0ME"/>
                            <constraint firstItem="LFK-qX-kTA" firstAttribute="trailing" secondItem="Mex-Mo-Eeg" secondAttribute="trailing" id="tdR-Sh-bPu"/>
                        </constraints>
                    </view>
                </viewController>
                <placeholder placeholderIdentifier="IBFirstResponder" id="Qn6-ay-CHg" userLabel="First Responder" customClass="UIResponder" sceneMemberID="firstResponder"/>
            </objects>
            <point key="canvasLocation" x="1503" y="117"/>
        </scene>
        <!--ScrollView-->
        <scene sceneID="s0d-6b-0kx">
            <objects>
                <viewController id="Y6W-OH-hqX" sceneMemberID="viewController">
                    <view key="view" contentMode="scaleToFill" id="5EZ-qb-Rvc">
                        <rect key="frame" x="0.0" y="0.0" width="414" height="896"/>
                        <autoresizingMask key="autoresizingMask" widthSizable="YES" heightSizable="YES"/>
                        <subviews>
                            <scrollView clipsSubviews="YES" multipleTouchEnabled="YES" contentMode="scaleToFill" translatesAutoresizingMaskIntoConstraints="NO" id="jQC-lN-xKC">
                                <rect key="frame" x="0.0" y="88" width="414" height="774"/>
                                <subviews>
                                    <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" textAlignment="natural" lineBreakMode="tailTruncation" numberOfLines="0" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="R1f-w1-pIV">
                                        <rect key="frame" x="0.0" y="0.0" width="414" height="2541"/>
                                        <mutableString key="text">UIScrollView is the superclass of several UIKit classes, including UITableView and UITextView.

A scroll view is a view with an origin that’s adjustable over the content view. It clips the content to its frame, which generally (but not necessarily) coincides with that of the application’s main window. A scroll view tracks the movements of fingers, and adjusts the origin accordingly. The view that shows its content through the scroll view draws that portion of itself according to the new origin, which is pinned to an offset in the content view. The scroll view itself does no drawing except for displaying vertical and horizontal scroll indicators. The scroll view must know the size of the content view so it knows when to stop scrolling. By default, it bounces back when scrolling exceeds the bounds of the content.

The object that manages the drawing of content that displays in a scroll view needs to tile the content’s subviews so that no view exceeds the size of the screen. As users scroll in the scroll view, this object adds and removes subviews as necessary.

Because a scroll view has no scroll bars, it must know whether a touch signals an intent to scroll versus an intent to track a subview in the content. To make this determination, it temporarily intercepts a touch-down event by starting a timer and, before the timer fires, seeing if the touching finger makes any movement. If the timer fires without a significant change in position, the scroll view sends tracking events to the touched subview of the content view. If the user then drags their finger far enough before the timer elapses, the scroll view cancels any tracking in the subview and performs the scrolling itself. Subclasses can override the touchesShouldBegin(_:with:in:), isPagingEnabled, and touchesShouldCancel(in:) methods (which the scroll view calls) to affect how the scroll view handles scrolling gestures.

A scroll view also handles zooming and panning of content. As the user makes a pinch-in or pinch-out gesture, the scroll view adjusts the offset and the scale of the content. When the gesture ends, the object managing the content view updates subviews of the content as necessary. (Note that the gesture can end and a finger might still be down.) While the gesture is in progress, the scroll view doesn’t send any tracking calls to the subview.

The UIScrollView class can have a delegate that must adopt the UIScrollViewDelegate protocol. For zooming and panning to work, the delegate must implement both viewForZooming(in:) and scrollViewDidEndZooming(_:with:atScale:). In addition, the maximumZoomScale and minimumZoomScale zoom scales must be different.</mutableString>
                                        <fontDescription key="fontDescription" style="UICTFontTextStyleTitle1"/>
                                        <nil key="textColor"/>
                                        <nil key="highlightedColor"/>
                                        <mutableString key="userLabel">UIScrollView is the superclass of several UIKit classes, including UITableView and UITextView.  A scroll view is a view with an origin that’s adjustable over the content view. It clips the content to its frame, which generally (but not necessarily) coincides with that of the application’s main window. A scroll view tracks the movements of fingers, and adjusts the origin accordingly. The view that shows its content through the scroll view draws that portion of itself according to the new origin, which is pinned to an offset in the content view. The scroll view itself does no drawing except for displaying vertical and horizontal scroll indicators. The scroll view must know the size of the content view so it knows when to stop scrolling. By default, it bounces back when scrolling exceeds the bounds of the content.  The object that manages the drawing of content that displays in a scroll view needs to tile the content’s subviews so that no view exceeds the size of the screen. As users scroll in the scroll view, this object adds and removes subviews as necessary.  Because a scroll view has no scroll bars, it must know whether a touch signals an intent to scroll versus an intent to track a subview in the content. To make this determination, it temporarily intercepts a touch-down event by starting a timer and, before the timer fires, seeing if the touching finger makes any movement. If the timer fires without a significant change in position, the scroll view sends tracking events to the touched subview of the content view. If the user then drags their finger far enough before the timer elapses, the scroll view cancels any tracking in the subview and performs the scrolling itself. Subclasses can override the touchesShouldBegin(_:with:in:), isPagingEnabled, and touchesShouldCancel(in:) methods (which the scroll view calls) to affect how the scroll view handles scrolling gestures.  A scroll view also handles zooming and panning of content. As the user makes a pinch-in or pinch-out gesture, the scroll view adjusts the offset and the scale of the content. When the gesture ends, the object managing the content view updates subviews of the content as necessary. (Note that the gesture can end and a finger might still be down.) While the gesture is in progress, the scroll view doesn’t send any tracking calls to the subview.  The UIScrollView class can have a delegate that must adopt the UIScrollViewDelegate protocol. For zooming and panning to work, the delegate must implement both viewForZooming(in:) and scrollViewDidEndZooming(_:with:atScale:). In addition, the maximumZoomScale and minimumZoomScale zoom scales must be different.</mutableString>
                                    </label>
                                </subviews>
                                <constraints>
                                    <constraint firstItem="R1f-w1-pIV" firstAttribute="width" secondItem="Day-mU-8Sc" secondAttribute="width" id="8pO-Nw-fae"/>
                                    <constraint firstItem="R1f-w1-pIV" firstAttribute="top" secondItem="P0Y-vO-0Y6" secondAttribute="top" id="KCw-sl-i3b"/>
                                    <constraint firstItem="R1f-w1-pIV" firstAttribute="leading" secondItem="P0Y-vO-0Y6" secondAttribute="leading" id="UvI-ve-aIV"/>
                                    <constraint firstItem="R1f-w1-pIV" firstAttribute="bottom" secondItem="P0Y-vO-0Y6" secondAttribute="bottom" id="bgz-ar-seb"/>
                                    <constraint firstItem="R1f-w1-pIV" firstAttribute="trailing" secondItem="P0Y-vO-0Y6" secondAttribute="trailing" id="yjS-TW-1um"/>
                                </constraints>
                                <viewLayoutGuide key="contentLayoutGuide" id="P0Y-vO-0Y6"/>
                                <viewLayoutGuide key="frameLayoutGuide" id="Day-mU-8Sc"/>
                            </scrollView>
                        </subviews>
                        <viewLayoutGuide key="safeArea" id="vDu-zF-Fre"/>
                        <color key="backgroundColor" systemColor="systemBackgroundColor"/>
                        <constraints>
                            <constraint firstItem="jQC-lN-xKC" firstAttribute="leading" secondItem="vDu-zF-Fre" secondAttribute="leading" id="2RE-4p-BVY"/>
                            <constraint firstItem="vDu-zF-Fre" firstAttribute="trailing" secondItem="jQC-lN-xKC" secondAttribute="trailing" id="Aoz-Ha-6hk"/>
                            <constraint firstItem="vDu-zF-Fre" firstAttribute="bottom" secondItem="jQC-lN-xKC" secondAttribute="bottom" id="ZuD-vj-IsA"/>
                            <constraint firstItem="jQC-lN-xKC" firstAttribute="top" secondItem="vDu-zF-Fre" secondAttribute="top" id="mHG-4o-hhi"/>
                        </constraints>
                    </view>
                    <navigationItem key="navigationItem" title="ScrollView" id="2Mj-vV-3EM"/>
                    <simulatedNavigationBarMetrics key="simulatedTopBarMetrics" prompted="NO"/>
                </viewController>
                <placeholder placeholderIdentifier="IBFirstResponder" id="Ief-a0-LHa" userLabel="First Responder" customClass="UIResponder" sceneMemberID="firstResponder"/>
            </objects>
            <point key="canvasLocation" x="131.8840579710145" y="116.51785714285714"/>
        </scene>
        <!--View-->
        <scene sceneID="2wi-kw-UeA">
            <objects>
                <viewController id="bKb-DX-npe" sceneMemberID="viewController">
                    <view key="view" contentMode="scaleToFill" id="hpx-2N-3tl">
                        <rect key="frame" x="0.0" y="0.0" width="414" height="896"/>
                        <autoresizingMask key="autoresizingMask" widthSizable="YES" heightSizable="YES"/>
                        <subviews>
                            <view contentMode="scaleToFill" translatesAutoresizingMaskIntoConstraints="NO" id="0p6-bu-HOT">
                                <rect key="frame" x="0.0" y="88" width="414" height="774"/>
                                <color key="backgroundColor" systemColor="systemBackgroundColor"/>
                            </view>
                        </subviews>
                        <viewLayoutGuide key="safeArea" id="wyg-aq-aRI"/>
                        <color key="backgroundColor" systemColor="systemBackgroundColor"/>
                        <constraints>
                            <constraint firstItem="wyg-aq-aRI" firstAttribute="trailing" secondItem="0p6-bu-HOT" secondAttribute="trailing" id="NSv-af-u8J"/>
                            <constraint firstItem="wyg-aq-aRI" firstAttribute="bottom" secondItem="0p6-bu-HOT" secondAttribute="bottom" id="W6B-En-tNr"/>
                            <constraint firstItem="0p6-bu-HOT" firstAttribute="top" secondItem="wyg-aq-aRI" secondAttribute="top" id="caP-lk-JSY"/>
                            <constraint firstItem="0p6-bu-HOT" firstAttribute="leading" secondItem="wyg-aq-aRI" secondAttribute="leading" id="nww-HL-YQ9"/>
                        </constraints>
                    </view>
                    <navigationItem key="navigationItem" title="View" id="oEQ-mH-0R1"/>
                    <simulatedNavigationBarMetrics key="simulatedTopBarMetrics" prompted="NO"/>
                </viewController>
                <placeholder placeholderIdentifier="IBFirstResponder" id="K2M-7C-0xs" userLabel="First Responder" customClass="UIResponder" sceneMemberID="firstResponder"/>
            </objects>
            <point key="canvasLocation" x="823" y="117"/>
        </scene>
    </scenes>
    <resources>
        <systemColor name="labelColor">
            <color white="0.0" alpha="1" colorSpace="custom" customColorSpace="genericGamma22GrayColorSpace"/>
        </systemColor>
        <systemColor name="systemBackgroundColor">
            <color white="1" alpha="1" colorSpace="custom" customColorSpace="genericGamma22GrayColorSpace"/>
        </systemColor>
    </resources>
</document>
